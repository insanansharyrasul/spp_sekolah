@startuml models_repo_service
package "Models" <<Model>> {
    class Student <<Model>> {
        - id: int
        - name: string
        - yearRegistered: int
        - classId: int
        --
        + Student(id: int, name: string, yearRegistered: int, classId: int)
        + getId(): int
        + getName(): string
        + getYearRegistered(): int
        + getClassId(): int
        + setName(name: string): void
        + setYearRegistered(year: int): void
        + setClassId(id: int): void
        + operator<<(os: ostream&, student: Student&): ostream&
    }

    class Payment <<Model>> {
        - id: string
        - studentId: int
        - amount: double
        - timestamp: time_t
        - deadline: time_t
        - isPaid: bool
        --
        + Payment(id: string, studentId: int, amount: double, timestamp: time_t, deadline: time_t, isPaid: bool)
        + getId(): string
        + getStudentId(): int
        + getAmount(): double
        + getTimestamp(): time_t
        + getDeadline(): time_t
        + getIsPaid(): bool
        + getMonth(): int
        + getYear(): int
        + setId(id: string): void
        + setStudentId(studentId: int): void
        + setAmount(amount: double): void
        + setTimestamp(timestamp: time_t): void
        + setDeadline(deadline: time_t): void
        + setIsPaid(isPaid: bool): void
        + setIsPaid(): void
        + setIsUnpaid(): void
        + isOverdue(): bool
        + daysRemaining(): int
        + toHtml(): string
        + operator<<(os: ostream&, payment: Payment&): ostream&
    }

    class Question <<Model>> {
        - id: int
        - studentId: int
        - studentName: string
        - questionText: string
        - answer: string
        - timestamp: time_t
        - isAnswered: bool
        --
        + Question(id: int, studentId: int, studentName: string, questionText: string)
        + getId(): int
        + getStudentId(): int
        + getStudentName(): string
        + getQuestionText(): string
        + getAnswer(): string
        + getTimestamp(): time_t
        + getIsAnswered(): bool
        + setAnswer(answerText: string): void
        + setTimestamp(ts: time_t): void
    }

    class Certificate <<Model>> {
        - hash: size_t
        - data: string
        --
        + Certificate(hash: size_t, data: string)
        + getHash(): size_t
        + getEncryptedData(): string
    }
}

package "Repositories" <<Repository>> {
    class StudentRepository <<Repository>> {
        - students: unordered_map<int, Student>
        - dataFilePath: string
        --
        + StudentRepository(filePath: string)
        + add(student: Student): bool
        + findById(id: int): Student*
        + findAll(): vector<Student>
        + update(student: Student): bool
        + remove(id: int): bool
        + loadFromFile(): bool
        + saveToFile(): bool
    }

    class PaymentRepository <<Repository>> {
        - payments: unordered_map<string, Payment>
        - dataFilePath: string
        --
        + PaymentRepository(filePath: string)
        + add(payment: Payment): bool
        + findById(id: string): Payment*
        + findAll(): vector<Payment>
        + findByStudentId(studentId: int): vector<Payment>
        + update(payment: Payment): bool
        + remove(id: string): bool
        + loadFromFile(): bool
        + saveToFile(): bool
    }

    class QuestionRepository <<Repository>> {
        - questions: unordered_map<int, Question>
        - nextQuestionId: int
        - dataFilePath: string
        --
        + QuestionRepository(filePath: string)
        + addQuestion(studentId: int, studentName: string, questionText: string): int
        + getNextPendingQuestion(): Question
        + answerQuestion(questionId: int, answer: string): bool
        + getAllPendingQuestions(): vector<Question>
        + getAnsweredQuestionsByStudentId(studentId: int): vector<Question>
        + hasPendingQuestions(): bool
        + getPendingCount(): int
        + loadFromFile(): bool
        + saveToFile(): bool
    }

    class CertificateRepository <<Repository>> {
        - certificates: unordered_map<size_t, Certificate>
        - dataFilePath: string
        --
        + CertificateRepository(filePath: string)
        + addCertificate(certificate: Certificate): string
        + getCertificate(certificate: Certificate): Certificate*
        + removeCertificate(certificate: Certificate): bool
        + loadFromFile(): bool
        + saveToFile(): bool
    }
}

package "Services" <<Service>> {
    class StudentService <<Service>> {
        - studentRepo: StudentRepository&
        --
        + StudentService(repo: StudentRepository&)
        + registerStudent(name: string, yearEnrolled: int, classId: int): bool
        + getStudentById(id: int): Student*
        + getAllStudents(): vector<Student>
        + updateStudent(id: int, name: string, classId: int): bool
        + getStudentName(id: int): string
        + deleteStudent(id: int): bool
    }

    class PaymentService <<Service>> {
        - paymentRepo: PaymentRepository&
        - studentRepo: StudentRepository&
        --
        + PaymentService(paymentRepo: PaymentRepository&, studentRepo: StudentRepository&)
        + setPayment(studentId: int, amount: double, deadline: time_t): string
        + verifyPaymentStatus(studentId: int, year: int, month: int): bool
        + getStudentPaymentHistory(studentId: int): vector<Payment>
        + deletePayment(paymentId: string): bool
        + verifyCertificate(certId: string, studentId: int, certService: CertificateService&): bool
        + markPaymentPaid(paymentId: string): bool
        + markPaymentUnpaid(paymentId: string): bool
        + calculateTotalPayments(year: int, month: int): double
        + getOverduePayments(): vector<Payment>
        + getAllPayments(): vector<Payment>
        - generatePaymentId(studentId: int): string
    }

    class QnAService <<Service>> {
        - questionRepo: QuestionRepository&
        --
        + QnAService(repo: QuestionRepository&)
        + submitQuestion(studentId: int, studentName: string, questionText: string): int
        + hasQuestionsToAnswer(): bool
        + getNextQuestion(): Question
        + answerQuestion(answer: string): void
        + getPendingQuestions(): vector<Question>
        + answerQuestionById(questionId: int, answerText: string): bool
        + getAnsweredQuestionsForStudent(studentId: int): vector<Question>
        + getQueueSize(): int
    }

    class CertificateService <<Service>> {
        - paymentRepo: PaymentRepository&
        - certificateRepo: CertificateRepository&
        - studentRepo: StudentRepository&
        --
        + CertificateService(paymentRepo: PaymentRepository&, certificateRepo: CertificateRepository&, studentRepo: StudentRepository&)
        + generateCertificate(paymentId: string): string
        + validateCertificate(signature: size_t): bool
        + deleteCertificate(certId: string): bool
        + decodeCertificate(certificateHash: size_t): string
        - encryptData(data: string): string
        - generateSignature(data: string): size_t
    }
}

' ===== RELATIONSHIPS =====

' Model relationships
Payment ||--|| Student : "belongs to"
Question ||--|| Student : "asked by"

' Repository relationships
StudentRepository o-- Student : "manages"
PaymentRepository o-- Payment : "manages"
QuestionRepository o-- Question : "manages"
CertificateRepository o-- Certificate : "manages"

' Service to Repository dependencies
StudentService --> StudentRepository : "uses"
PaymentService --> PaymentRepository : "uses"
PaymentService --> StudentRepository : "uses"
QnAService --> QuestionRepository : "uses"
CertificateService --> PaymentRepository : "uses"
CertificateService --> CertificateRepository : "uses"
CertificateService --> StudentRepository : "uses"

' Service cross-dependencies
PaymentService ..> CertificateService : "verifies certificates"

@enduml